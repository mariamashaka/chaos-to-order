// ============================================
// CHAOS TO ORDER - –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
// ============================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let appData = {
    categories: ['–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ü–µ—Ä—Å–æ–Ω–∞–ª', '–§–∞—Ä–º–∞—Ü–∏—è', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ü–∞—Ü–∏–µ–Ω—Ç—ã', '–°–µ–º—å—è', '–î–µ—Ç–∏', '–ó–¥–æ—Ä–æ–≤—å–µ', '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', '–î–æ–º', '–§–∏–Ω–∞–Ω—Å—ã', '–ü—Ä–æ—á–µ–µ'],
    yearlyGoals: {},
    quarterlyTasks: {},
    chaosTasks: [],
    weeklyPlans: {},
    dailyPlan: [],
    cyclicTasks: [
        { title: '–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–¥–µ—Ä —Ñ–∞—Ä–º–∞—Ü–∏–∏', category: '–§–∞—Ä–º–∞—Ü–∏—è', dayOfMonth: 20 },
        { title: '–ü–∏—Å–∞—Ç—å —à–∏—Ñ—Ç—ã MD', category: '–ü–µ—Ä—Å–æ–Ω–∞–ª', dayOfMonth: 24 },
        { title: '–ü–∏—Å–∞—Ç—å —à–∏—Ñ—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤', category: '–ü–µ—Ä—Å–æ–Ω–∞–ª', dayOfMonth: 1 },
        { title: '–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ', category: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', dayOfMonth: 10 }
    ],
    currentQuarter: 1,
    currentWeek: 1
};

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Chaos to Order –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    loadData();
    initializeCategories();
    showView('chaos');
    renderChaosView();
});

// ============================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò
// ============================================
function saveData() {
    try {
        localStorage.setItem('chaosToOrderData', JSON.stringify(appData));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

function loadData() {
    try {
        const saved = localStorage.getItem('chaosToOrderData');
        if (saved) {
            const loadedData = JSON.parse(saved);
            appData = { ...appData, ...loadedData };
            console.log('üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
}

// ============================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ê–ú–ò
// ============================================
function showView(viewName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã
    document.querySelectorAll('.view-container').forEach(view => {
        view.classList.add('hidden');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('ring-4', 'ring-white');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –≤–∏–¥
    const targetView = document.getElementById(viewName + '-view');
    if (targetView) {
        targetView.classList.remove('hidden');
    }
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    const activeBtn = document.getElementById('nav-' + viewName);
    if (activeBtn) {
        activeBtn.classList.add('ring-4', 'ring-white');
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    switch(viewName) {
        case 'strategic':
            renderStrategicView();
            break;
        case 'chaos':
            renderChaosView();
            break;
        case 'weekly':
            renderWeeklyView();
            break;
        case 'daily':
            renderDailyView();
            break;
        case 'settings':
            renderSettingsView();
            break;
    }
}

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================
function initializeCategories() {
    const categorySelect = document.getElementById('new-task-category');
    if (categorySelect) {
        categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
        appData.categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
        });
    }
}

// ============================================
// –•–ê–û–°-–ó–û–ù–ê
// ============================================
function addChaosTask() {
    const title = document.getElementById('new-task-title').value.trim();
    const category = document.getElementById('new-task-category').value;
    const priority = document.getElementById('new-task-priority').value;
    
    if (!title) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!');
        return;
    }
    
    if (!category) {
        alert('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!');
        return;
    }
    
    const newTask = {
        id: Date.now(),
        title: title,
        category: category,
        priority: priority,
        completed: false,
        createdAt: new Date().toISOString(),
        estimatedTime: '15min' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    
    appData.chaosTasks.push(newTask);
    saveData();
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('new-task-title').value = '';
    document.getElementById('new-task-category').value = '';
    document.getElementById('new-task-priority').value = 'medium';
    
    renderChaosView();
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ö–∞–æ—Å:', newTask.title);
}

function renderChaosView() {
    const container = document.getElementById('chaos-tasks');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (appData.chaosTasks.length === 0) {
        container.innerHTML = `
            <div class="col-span-full text-center py-8 text-gray-500">
                <i class="fas fa-inbox text-4xl mb-4"></i>
                <p>–•–∞–æ—Å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É.</p>
            </div>
        `;
        return;
    }
    
    appData.chaosTasks.forEach(task => {
        const taskCard = createTaskCard(task, 'chaos');
        container.appendChild(taskCard);
    });
}

function createTaskCard(task, source = 'chaos') {
    const card = document.createElement('div');
    card.className = `bg-white rounded-lg p-4 shadow border-l-4 priority-${task.priority}`;
    
    const priorityIcons = {
        urgent: 'üî•',
        high: '‚ö°',
        medium: 'üìã',
        low: 'üí§'
    };
    
    const priorityLabels = {
        urgent: '–°—Ä–æ—á–Ω–æ',
        high: '–í—ã—Å–æ–∫–∏–π',
        medium: '–°—Ä–µ–¥–Ω–∏–π',
        low: '–ù–∏–∑–∫–∏–π'
    };
    
    card.innerHTML = `
        <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
                <h3 class="font-medium text-gray-800 mb-1">${task.title}</h3>
                <div class="text-sm text-gray-600">
                    <span class="inline-block bg-gray-100 px-2 py-1 rounded mr-2">
                        ${task.category}
                    </span>
                    <span class="inline-block">
                        ${priorityIcons[task.priority]} ${priorityLabels[task.priority]}
                    </span>
                </div>
            </div>
            <div class="flex items-center space-x-2">
                <button onclick="toggleTaskComplete(${task.id}, '${source}')" 
                        class="w-6 h-6 rounded border-2 ${task.completed ? 'bg-green-500 border-green-500' : 'border-gray-300'} 
                               flex items-center justify-center hover:border-green-400">
                    ${task.completed ? '<i class="fas fa-check text-white text-xs"></i>' : ''}
                </button>
                <button onclick="editTask(${task.id})" class="text-gray-400 hover:text-blue-500">
                    <i class="fas fa-edit"></i>
                </button>
                <button onclick="deleteTask(${task.id}, '${source}')" class="text-gray-400 hover:text-red-500">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        
        ${source === 'chaos' ? `
        <div class="flex space-x-2">
            <select onchange="moveToWeek(${task.id}, this.value)" class="text-sm p-2 border rounded flex-1">
                <option value="">‚û°Ô∏è –í –Ω–µ–¥–µ–ª—é</option>
                <option value="1">–ù–µ–¥–µ–ª—è 1</option>
                <option value="2">–ù–µ–¥–µ–ª—è 2</option>
                <option value="3">–ù–µ–¥–µ–ª—è 3</option>
                <option value="4">–ù–µ–¥–µ–ª—è 4</option>
            </select>
        </div>
        ` : ''}
    `;
    
    return card;
}

// ============================================
// –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò
// ============================================
function toggleTaskComplete(taskId, source) {
    if (source === 'chaos') {
        const task = appData.chaosTasks.find(t => t.id === taskId);
        if (task) {
            task.completed = !task.completed;
            saveData();
            renderChaosView();
        }
    }
    // –î–æ–±–∞–≤–∏–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∑–∂–µ
}

function editTask(taskId) {
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    const task = appData.chaosTasks.find(t => t.id === taskId);
    if (task) {
        const newTitle = prompt('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', task.title);
        if (newTitle && newTitle.trim()) {
            task.title = newTitle.trim();
            saveData();
            renderChaosView();
        }
    }
}

function deleteTask(taskId, source) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) {
        if (source === 'chaos') {
            appData.chaosTasks = appData.chaosTasks.filter(t => t.id !== taskId);
            saveData();
            renderChaosView();
        }
    }
}

function moveToWeek(taskId, weekNumber) {
    if (!weekNumber) return;
    
    const task = appData.chaosTasks.find(t => t.id === taskId);
    if (task) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!appData.weeklyPlans[weekNumber]) {
            appData.weeklyPlans[weekNumber] = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω
        appData.weeklyPlans[weekNumber].push({...task, movedAt: new Date().toISOString()});
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ —Ö–∞–æ—Å–∞
        appData.chaosTasks = appData.chaosTasks.filter(t => t.id !== taskId);
        
        saveData();
        renderChaosView();
        
        console.log(`üìÖ –ó–∞–¥–∞—á–∞ "${task.title}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –Ω–µ–¥–µ–ª—é ${weekNumber}`);
    }
}

// ============================================
// –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –•–ê–û–°–ê
// ============================================
function filterChaos(filterType) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('ring-2', 'ring-white');
    });
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    event.target.classList.add('ring-2', 'ring-white');
    
    const container = document.getElementById('chaos-tasks');
    if (!container) return;
    
    let filteredTasks = [...appData.chaosTasks];
    
    switch(filterType) {
        case 'urgent':
            filteredTasks = filteredTasks.filter(task => task.priority === 'urgent');
            break;
        case 'quick':
            filteredTasks = filteredTasks.filter(task => task.estimatedTime === '5min');
            break;
        case 'all':
        default:
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
            break;
    }
    
    container.innerHTML = '';
    
    if (filteredTasks.length === 0) {
        container.innerHTML = `
            <div class="col-span-full text-center py-8 text-gray-500">
                <i class="fas fa-filter text-4xl mb-4"></i>
                <p>–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–µ</p>
            </div>
        `;
        return;
    }
    
    filteredTasks.forEach(task => {
        const taskCard = createTaskCard(task, 'chaos');
        container.appendChild(taskCard);
    });
}

// ============================================
// –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –§–£–ù–ö–¶–ò–ô
// ============================================
function renderStrategicView() {
    console.log('üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function renderWeeklyView() {
    console.log('üìÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function renderDailyView() {
    console.log('‚è∞ –î–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

// ============================================
// –ù–ê–°–¢–†–û–ô–ö–ò - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò
// ============================================
function renderSettingsView() {
    const settingsView = document.getElementById('settings-view');
    if (!settingsView) return;
    
    settingsView.innerHTML = `
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ -->
            <div class="bg-white rounded-lg p-6 shadow-lg">
                <h2 class="text-2xl font-bold mb-4 text-gray-700">
                    <i class="fas fa-tags"></i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                </h2>
                
                <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -->
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="font-medium mb-3">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
                    <div class="flex gap-2">
                        <input type="text" id="new-category-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
                               class="flex-1 p-2 border rounded">
                        <button onclick="addCategory()" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                            <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å
                        </button>
                    </div>
                </div>
                
                <!-- –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π -->
                <div>
                    <h3 class="font-medium mb-3">–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                    <div id="categories-list" class="space-y-2">
                        <!-- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—é–¥–∞ -->
                    </div>
                </div>
            </div>
            
            <!-- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö -->
            <div class="bg-white rounded-lg p-6 shadow-lg">
                <h2 class="text-2xl font-bold mb-4 text-blue-700">
                    <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                </h2>
                
                <div class="space-y-4">
                    <button onclick="exportToJSON()" class="w-full bg-blue-600 text-white px-4 py-3 rounded hover:bg-blue-700">
                        <i class="fas fa-file-code"></i> –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                    </button>
                    
                    <button onclick="exportToPDF()" class="w-full bg-red-600 text-white px-4 py-3 rounded hover:bg-red-700">
                        <i class="fas fa-file-pdf"></i> –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—Å–∫–æ—Ä–æ)
                    </button>
                    
                    <div class="mt-4 p-4 bg-yellow-50 rounded border border-yellow-200">
                        <h4 class="font-medium text-yellow-800 mb-2">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                        <div class="text-sm text-yellow-700">
                            <p>–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: <span class="font-bold">${appData.categories.length}</span></p>
                            <p>–ó–∞–¥–∞—á –≤ —Ö–∞–æ—Å–µ: <span class="font-bold">${appData.chaosTasks.length}</span></p>
                            <p>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: <span class="font-bold">${appData.chaosTasks.filter(t => t.completed).length}</span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö -->
        <div class="mt-6 bg-white rounded-lg p-6 shadow-lg">
            <h2 class="text-2xl font-bold mb-4 text-purple-700">
                <i class="fas fa-upload"></i> –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </h2>
            <div class="flex items-center gap-4">
                <input type="file" id="import-file" accept=".json" class="hidden">
                <button onclick="document.getElementById('import-file').click()" 
                        class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">
                    <i class="fas fa-file-upload"></i> –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª JSON
                </button>
                <button onclick="importFromJSON()" class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">
                    <i class="fas fa-upload"></i> –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <span class="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞–Ω–µ–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
            </div>
        </div>
    `;
    
    renderCategoriesList();
}

function renderCategoriesList() {
    const container = document.getElementById('categories-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    appData.categories.forEach((category, index) => {
        const categoryItem = document.createElement('div');
        categoryItem.className = 'flex items-center justify-between p-3 bg-gray-50 rounded border';
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const tasksCount = appData.chaosTasks.filter(task => task.category === category).length;
        
        categoryItem.innerHTML = `
            <div class="flex items-center gap-3">
                <span class="w-4 h-4 bg-blue-500 rounded"></span>
                <span class="font-medium">${category}</span>
                <span class="text-sm text-gray-500">(${tasksCount} –∑–∞–¥–∞—á)</span>
            </div>
            <div class="flex items-center gap-2">
                <button onclick="editCategory(${index})" class="text-blue-500 hover:text-blue-700">
                    <i class="fas fa-edit"></i>
                </button>
                <button onclick="deleteCategory(${index})" class="text-red-500 hover:text-red-700 ${tasksCount > 0 ? 'opacity-50 cursor-not-allowed' : ''}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        container.appendChild(categoryItem);
    });
}

function addCategory() {
    const nameInput = document.getElementById('new-category-name');
    const name = nameInput.value.trim();
    
    if (!name) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!');
        return;
    }
    
    if (appData.categories.includes(name)) {
        alert('‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }
    
    appData.categories.push(name);
    saveData();
    
    nameInput.value = '';
    renderCategoriesList();
    initializeCategories(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:', name);
}

function editCategory(index) {
    const currentName = appData.categories[index];
    const newName = prompt('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', currentName);
    
    if (!newName || !newName.trim()) return;
    
    const trimmedName = newName.trim();
    
    if (appData.categories.includes(trimmedName) && trimmedName !== currentName) {
        alert('‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö
    appData.chaosTasks.forEach(task => {
        if (task.category === currentName) {
            task.category = trimmedName;
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    appData.categories[index] = trimmedName;
    
    saveData();
    renderCategoriesList();
    initializeCategories();
    renderChaosView(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
    
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞:', currentName, '‚Üí', trimmedName);
}

function deleteCategory(index) {
    const category = appData.categories[index];
    const tasksCount = appData.chaosTasks.filter(task => task.category === category).length;
    
    if (tasksCount > 0) {
        alert(`‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}" - –≤ –Ω–µ–π –µ—Å—Ç—å ${tasksCount} –∑–∞–¥–∞—á!`);
        return;
    }
    
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"?`)) return;
    
    appData.categories.splice(index, 1);
    saveData();
    
    renderCategoriesList();
    initializeCategories();
    
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞:', category);
}

// ============================================
// –≠–ö–°–ü–û–†–¢ –ò –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–•
// ============================================
function exportToJSON() {
    const dataToExport = {
        ...appData,
        exportDate: new Date().toISOString(),
        version: '1.0'
    };
    
    const blob = new Blob([JSON.stringify(dataToExport, null, 2)], {
        type: 'application/json'
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `chaos-to-order-backup-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    console.log('üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON');
}

function exportToPDF() {
    alert('üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!');
}

function importFromJSON() {
    const fileInput = document.getElementById('import-file');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            
            if (!confirm('‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (importedData.categories && Array.isArray(importedData.categories)) {
                appData = { ...appData, ...importedData };
                saveData();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                initializeCategories();
                renderSettingsView();
                renderChaosView();
                
                alert('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
                console.log('üì• –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            } else {
                alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!');
            }
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞!');
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
        }
    };
    
    reader.readAsText(file);
}

function addYearlyGoal() {
    console.log('üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function loadQuarter() {
    console.log('üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function reviewQuarter() {
    console.log('üìù –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

// ============================================
// CSS –°–¢–ò–õ–ò –î–õ–Ø –ö–ù–û–ü–û–ö
// ============================================
const style = document.createElement('style');
style.textContent = `
    .nav-btn {
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .nav-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    
    .filter-btn {
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .filter-btn:hover {
        transform: translateY(-1px);
    }
`;
document.head.appendChild(style);

console.log('üéâ Chaos to Order –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
